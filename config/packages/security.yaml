security:
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    our_db_provider:
      entity:
        class: App\Entity\Participant
        property: pseudo
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      pattern: ^/
      provider: our_db_provider
      anonymous: ~
      form_login:
        login_path: login
        check_path: login
        csrf_token_generator: security.csrf.token_manager
      remember_me:
        # https://symfony.com/doc/current/security/remember_me.html
        secret: '%kernel.secret%'
        lifetime: 14400 # 4h in seconds
        path: /
      guard:
        authenticators:
          - App\Security\LoginFormAuthenticator
      logout:
        path: logout
        # where to redirect after logout
        target: login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication
      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # require ROLE_ADMIN or IS_AUTHENTICATED_FULLY for /admin*
    - { path: ^/admin, roles: ROLE_ADMIN }
#    - { path: ^/admin/*, roles: ROLE_ADMIN }
    - { path: ^/profil, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/reset, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    # the 'path' value can be any valid regular expression
    # (this one will match URLs like /api/post/7298 and /api/comment/528491)
    - { path: ^/, roles: ROLE_USER }
  role_hierarchy:
    ROLE_ADMIN: [ ROLE_USER ]
  encoders:
    App\Entity\Participant:
      algorithm: sha512

